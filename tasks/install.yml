---
# Check if Solr already installed
- name: Check if Solr already installed
  command: '{{ solr_install_dir }}/solr/bin/solr version'
  register: solr_existing_version
  changed_when: false
  failed_when: false

# Oneliner borrowed here: https://github.com/jiv-e/ansible-multicore-solr/blob/master/roles/jiv_e.solr/tasks/install-solr.yml#L15
- name: Get the closest mirror for Apache Solr
  shell: >
    curl -s http://www.apache.org/dyn/closer.cgi/lucene/solr |
    sed -n '/id="http"/,/id="backup"/p' |
    sed -nr 's/.*href=\"(.*)\".*/\1/p' |
    sed -n '2,${/https\?:\/\//p;q}'
  # Skip Ansible Lint check, as it not really possible to achieve the same
  # functionality with modules.
  args:
    warn: false
  register: solr_closest_mirror
  changed_when: false
  when: solr_existing_version.rc != 0

# Make sure all directories exist
- name: Make sure all directories exist
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - '{{ solr_download_dir }}'
    - '{{ solr_install_dir }}'
    - '{{ solr_data_dir }}'
  when: solr_existing_version.rc != 0

- name: Set download destination
  set_fact:
    solr_download_dest: '{{ solr_download_dir }}/solr-{{ solr_version }}.tgz'
  changed_when: false
  when: solr_existing_version.rc != 0

# Download Solr from the closest mirror (won't work for archive releases).
- name: Download Solr from the closest mirror
  get_url:
    url: '{{ solr_closest_mirror.stdout }}/{{ solr_version }}/solr-{{ solr_version }}.tgz'
    dest: '{{ solr_download_dest }}'
  register: solr_closest_mirror_result
  failed_when: false
  when: solr_existing_version.rc != 0

# Download Solr from the archive as backup.
- name: Download Solr from the archive
  get_url:
    url: http://archive.apache.org/dist/lucene/solr/{{ solr_version }}/solr-{{ solr_version }}.tgz
    dest: '{{ solr_download_dest }}'
  when: solr_existing_version.rc != 0 and solr_closest_mirror_result.state == 'absent'

- name: Download the keys as well as the .asc signature file
  get_url:
    url: http://archive.apache.org/dist/lucene/solr/{{ solr_version }}/{{ item }}
    dest: '{{ solr_download_dir }}/{{ item }}'
    force: true
  with_items:
    - KEYS
    - solr-{{ solr_version }}.tgz.asc
  when: solr_existing_version.rc != 0

- name: Import GPG keys
  command: gpg --import {{ solr_download_dir }}/KEYS
  changed_when: false
  when: solr_existing_version.rc != 0

- name: Verify the signatures
  command: gpg --verify {{ solr_download_dir }}/solr-{{ solr_version }}.tgz.asc {{ solr_download_dest }}
  changed_when: false
  when: solr_existing_version.rc != 0

- name: Unpack Solr
  unarchive:
    src: '{{ solr_download_dest }}'
    dest: '{{ solr_download_dir }}'
    remote_src: true
    creates: '{{ solr_download_dir }}/solr-{{ solr_version }}/bin/install_solr_service.sh'
  when: solr_existing_version.rc != 0

- name: Run Solr installation script
  command: >
    {{ solr_download_dir }}/solr-{{ solr_version }}/bin/install_solr_service.sh
    {{ solr_download_dest }}
    -d {{ solr_data_dir }}
    -i {{ solr_install_dir }}
    -p {{ solr_port }}
    -u {{ solr_user }}
  args:
    creates: '{{ solr_install_dir }}/solr/bin/solr'
  when: solr_existing_version.rc != 0

- name: Ensure solr is started and enabled on boot
  service:
    name: solr
    state: started
    enabled: yes

- name: Add Solr bin directory to global $PATH
  template:
    src: solr.sh.j2
    dest: /etc/profile.d/solr.sh
    mode: 0644
